{"ast":null,"code":"import { Result } from 'antd';\nimport { basePath, apiVersion } from './config';\nexport function getCoursesApi() {\n  const url = `${basePath}/${apiVersion}/get-courses`;\n  return fetch(url).then(response => response.json()).then(result => result).catch(err => err);\n}\nexport function getCourseDataUdemyApi(id) {\n  const baseUrl = `https://www.udemy.com/api-2.0/courses/${id}/`;\n  const coursesParams = \"?fields[course]=title,headline,url,price,image_480x270\";\n  const url = baseUrl + coursesParams;\n  return fetch(url).then(async response => {\n    return {\n      code: response.status,\n      data: await response.json()\n    };\n  }).then(result => result).catch(err => err);\n}\nexport function deleteCourseApi(token, id) {\n  const url = `${basePath}/${apiVersion}/delete-course/${id}`;\n  const params = {\n    method: 'DELETE',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token\n    }\n  };\n  return fetch(url, params).then(response => response.json()).then(result => result).catch(err => err);\n}\nexport function addCourseApi(token, course) {\n  const url = `${basePath}/${apiVersion}/add-course`;\n  const params = {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token\n    },\n    body: JSON.stringify(course)\n  };\n  return fetch(url, params).then(response => response.json()).then(result => result).catch(err => err);\n}\nexport function updateCourseApi(token, id, data) {\n  const url = `${basePath}/${apiVersion}/update-course/:`;\n  const params = {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token\n    },\n    body: JSON.stringify(course)\n  };\n  return fetch(url, params).then(response => response.json()).then(result => result).catch(err => err);\n}","map":{"version":3,"sources":["/Users/ddiaz/web-personal-udemy/client/src/api/courses.js"],"names":["Result","basePath","apiVersion","getCoursesApi","url","fetch","then","response","json","result","catch","err","getCourseDataUdemyApi","id","baseUrl","coursesParams","code","status","data","deleteCourseApi","token","params","method","headers","Authorization","addCourseApi","course","body","JSON","stringify","updateCourseApi"],"mappings":"AAAA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,UAArC;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC5B,QAAMC,GAAG,GAAI,GAAEH,QAAS,IAAGC,UAAW,cAAtC;AAEA,SAAOG,KAAK,CAACD,GAAD,CAAL,CACFE,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADf,EAEFF,IAFE,CAEGG,MAAM,IAAIA,MAFb,EAGFC,KAHE,CAGIC,GAAG,IAAIA,GAHX,CAAP;AAIH;AAED,OAAO,SAASC,qBAAT,CAA+BC,EAA/B,EAAmC;AACtC,QAAMC,OAAO,GAAI,yCAAwCD,EAAG,GAA5D;AACA,QAAME,aAAa,GAAG,wDAAtB;AACA,QAAMX,GAAG,GAAGU,OAAO,GAAGC,aAAtB;AAEA,SAAOV,KAAK,CAACD,GAAD,CAAL,CACFE,IADE,CACG,MAAMC,QAAN,IAAkB;AACpB,WAAM;AAACS,MAAAA,IAAI,EAAET,QAAQ,CAACU,MAAhB;AAAwBC,MAAAA,IAAI,EAAE,MAAMX,QAAQ,CAACC,IAAT;AAApC,KAAN;AACH,GAHE,EAIFF,IAJE,CAIGG,MAAM,IAAIA,MAJb,EAKFC,KALE,CAKIC,GAAG,IAAIA,GALX,CAAP;AAMH;AAED,OAAO,SAASQ,eAAT,CAAyBC,KAAzB,EAAgCP,EAAhC,EAAoC;AACvC,QAAMT,GAAG,GAAI,GAAEH,QAAS,IAAGC,UAAW,kBAAiBW,EAAG,EAA1D;AACA,QAAMQ,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,QADG;AAEXC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAELC,MAAAA,aAAa,EAAEJ;AAFV;AAFE,GAAf;AAOA,SAAOf,KAAK,CAACD,GAAD,EAAMiB,MAAN,CAAL,CACFf,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADf,EAEFF,IAFE,CAEGG,MAAM,IAAIA,MAFb,EAGFC,KAHE,CAGIC,GAAG,IAAIA,GAHX,CAAP;AAIH;AAED,OAAO,SAASc,YAAT,CAAsBL,KAAtB,EAA6BM,MAA7B,EAAqC;AACxC,QAAMtB,GAAG,GAAI,GAAEH,QAAS,IAAGC,UAAW,aAAtC;AAEA,QAAMmB,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAELC,MAAAA,aAAa,EAAEJ;AAFV,KAFE;AAMXO,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,MAAf;AANK,GAAf;AASA,SAAOrB,KAAK,CAACD,GAAD,EAAMiB,MAAN,CAAL,CACFf,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADf,EAEFF,IAFE,CAEGG,MAAM,IAAIA,MAFb,EAGFC,KAHE,CAGIC,GAAG,IAAIA,GAHX,CAAP;AAIH;AAED,OAAO,SAASmB,eAAT,CAAyBV,KAAzB,EAAgCP,EAAhC,EAAoCK,IAApC,EAA0C;AAC7C,QAAMd,GAAG,GAAI,GAAEH,QAAS,IAAGC,UAAW,kBAAtC;AAEA,QAAMmB,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAELC,MAAAA,aAAa,EAAEJ;AAFV,KAFE;AAMXO,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,MAAf;AANK,GAAf;AASA,SAAOrB,KAAK,CAACD,GAAD,EAAMiB,MAAN,CAAL,CACFf,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADf,EAEFF,IAFE,CAEGG,MAAM,IAAIA,MAFb,EAGFC,KAHE,CAGIC,GAAG,IAAIA,GAHX,CAAP;AAIH","sourcesContent":["import { Result } from 'antd';\nimport { basePath, apiVersion } from './config';\n\nexport function getCoursesApi() {\n    const url = `${basePath}/${apiVersion}/get-courses`;\n    \n    return fetch(url)\n        .then(response => response.json())\n        .then(result => result)\n        .catch(err => err)\n}\n\nexport function getCourseDataUdemyApi(id) {\n    const baseUrl = `https://www.udemy.com/api-2.0/courses/${id}/`\n    const coursesParams = \"?fields[course]=title,headline,url,price,image_480x270\"\n    const url = baseUrl + coursesParams;\n\n    return fetch(url)\n        .then(async response => {\n            return{code: response.status, data: await response.json()}\n        })\n        .then(result => result)\n        .catch(err => err)\n}\n\nexport function deleteCourseApi(token, id) {\n    const url = `${basePath}/${apiVersion}/delete-course/${id}`;\n    const params = {\n        method: 'DELETE',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: token\n        }\n    }\n    return fetch(url, params)\n        .then(response => response.json())\n        .then(result => result)\n        .catch(err => err)\n}\n\nexport function addCourseApi(token, course) {\n    const url = `${basePath}/${apiVersion}/add-course`;\n    \n    const params = {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: token\n        },\n        body: JSON.stringify(course)\n    }\n\n    return fetch(url, params)\n        .then(response => response.json())\n        .then(result => result)\n        .catch(err => err)\n}\n\nexport function updateCourseApi(token, id, data) {\n    const url = `${basePath}/${apiVersion}/update-course/:`;\n\n    const params = {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: token\n        },\n        body: JSON.stringify(course)\n    }\n\n    return fetch(url, params)\n        .then(response => response.json())\n        .then(result => result)\n        .catch(err => err)\n}"]},"metadata":{},"sourceType":"module"}