{"ast":null,"code":"var _jsxFileName = \"/Users/ddiaz/web-personal-udemy/client/src/pages/Admin/Blog/Blog.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Button, notification } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\nimport Modal from '../../../components/Modal';\nimport PostsList from '../../../components/Admin/Blog/PostList';\nimport Pagination from '../../../components/Pagination';\nimport AddEditPostForm from '../../../components/Admin/Blog/AddEditPostForm';\nimport './Blog.scss';\nimport { getPostApi } from '../../../api/post';\n\nfunction Blog(props) {\n  const [modalTitle, setModalTitle] = useState('');\n  const [isVisibleModal, setIsVisibleModal] = useState(false);\n  const [modalContent, setModalContent] = useState(null);\n  const [posts, setPosts] = useState(null);\n  const [reloadPosts, setReloadPosts] = useState(false);\n  const {\n    location,\n    history\n  } = props;\n  const {\n    page = 1\n  } = queryString.parse(location.search);\n  useEffect(() => {\n    getPostApi(9, page).then(response => {\n      if ((response === null || response === void 0 ? void 0 : response.code) !== 200) {\n        notification['warning']({\n          message: response.message\n        });\n      } else {\n        setPosts(response.post);\n      }\n    }).catch(() => notification['error']({\n      message: 'Error del servidor.'\n    }));\n    setReloadPosts(false);\n  }, [page, reloadPosts]);\n\n  const addPost = () => {\n    setIsVisibleModal(true);\n    setModalTitle('Nuevo Post');\n    setModalContent( /*#__PURE__*/React.createElement(AddEditPostForm, {\n      setIsVisibleModal: setIsVisibleModal,\n      setReloadPosts: setReloadPosts,\n      post: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }\n    }));\n  };\n\n  const editPost = post => {\n    setIsVisibleModal(true);\n    setModalTitle('Editar Post');\n    setModalContent({});\n  };\n\n  if (!posts) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blog__add-post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: addPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"Nuevo Post\")), /*#__PURE__*/React.createElement(PostsList, {\n    posts: posts,\n    setReloadPosts: setReloadPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Pagination, {\n    posts: posts,\n    location: location,\n    history: history,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    title: modalTitle,\n    isVisible: isVisibleModal,\n    setIsVisible: setIsVisibleModal,\n    width: \"55%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, modalContent));\n}\n\nexport default withRouter(Blog);","map":{"version":3,"sources":["/Users/ddiaz/web-personal-udemy/client/src/pages/Admin/Blog/Blog.js"],"names":["React","useEffect","useState","Button","notification","withRouter","queryString","Modal","PostsList","Pagination","AddEditPostForm","getPostApi","Blog","props","modalTitle","setModalTitle","isVisibleModal","setIsVisibleModal","modalContent","setModalContent","posts","setPosts","reloadPosts","setReloadPosts","location","history","page","parse","search","then","response","code","message","post","catch","addPost","editPost"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, notification } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\nimport Modal from '../../../components/Modal';\nimport PostsList from '../../../components/Admin/Blog/PostList';\nimport Pagination from '../../../components/Pagination';\nimport AddEditPostForm from '../../../components/Admin/Blog/AddEditPostForm';\n\nimport './Blog.scss';\nimport { getPostApi } from '../../../api/post';\n\nfunction Blog(props) {\n\n    const [modalTitle, setModalTitle] = useState('');\n    const [isVisibleModal, setIsVisibleModal] = useState(false);\n    const [modalContent, setModalContent] = useState(null);\n    const [posts, setPosts] = useState(null);\n    const [reloadPosts, setReloadPosts] = useState(false);\n\n    const { location, history } = props;\n    const { page = 1 } = queryString.parse(location.search);\n     \n    \n     \n    useEffect(() => {\n        getPostApi(9, page)\n            .then(response => {\n                if (response?.code !== 200) {\n                    notification['warning']({message: response.message})\n                } else {\n                     setPosts(response.post)\n                }\n            })\n            .catch(() => notification['error']({ message: 'Error del servidor.' }))\n        setReloadPosts(false)\n    }, [page, reloadPosts])\n\n    const addPost = () => {\n        setIsVisibleModal(true)\n        setModalTitle('Nuevo Post')\n        setModalContent(<AddEditPostForm setIsVisibleModal={setIsVisibleModal} setReloadPosts={setReloadPosts} post={null} />)\n    }\n\n    const editPost = post => {\n        setIsVisibleModal(true)\n        setModalTitle('Editar Post')\n        setModalContent({})\n    }\n     \n    if (!posts) {\n        return null;\n    }\n\n    return (\n        <div className='blog'>\n            <div className='blog__add-post'>\n                <Button type='primary' onClick={addPost}>\n                    Nuevo Post\n                </Button>\n            </div>\n            <PostsList posts={posts} setReloadPosts={setReloadPosts} />\n            <Pagination posts={posts} location={location} history={history} />\n            <Modal \n                title={modalTitle }\n                isVisible={isVisibleModal }\n                setIsVisible={setIsVisibleModal }\n                width='55%'\n            >\n                {modalContent}\n            </Modal>\n        </div>\n    )\n}\n\n\nexport default withRouter(Blog)"]},"metadata":{},"sourceType":"module"}